{"version":3,"file":"vega-tooltip.min.js","sources":["../src/formatValue.ts","../src/style.ts","../src/defaults.ts","../src/position.ts","../src/Handler.ts","../src/index.ts"],"sourcesContent":["import {isArray, isObject, isString} from 'vega-util';\n\n/**\n * Format the value to be shown in the tooltip.\n *\n * @param value The value to show in the tooltip.\n * @param valueToHtml Function to convert a single cell value to an HTML string\n */\nexport function formatValue(\n  value: any,\n  valueToHtml: (value: any) => string,\n  maxDepth: number,\n  baseURL?: string,\n): string {\n  if (isArray(value)) {\n    return `[${value.map((v) => valueToHtml(isString(v) ? v : stringify(v, maxDepth))).join(', ')}]`;\n  }\n\n  if (isObject(value)) {\n    let content = '';\n\n    const {title, image, ...rest} = value as any;\n\n    if (title) {\n      content += `<h2>${valueToHtml(title)}</h2>`;\n    }\n\n    if (image) {\n      content += `<img src=\"${new URL(valueToHtml(image), baseURL || location.href).href}\">`;\n    }\n\n    const keys = Object.keys(rest);\n    if (keys.length > 0) {\n      content += '<table>';\n      for (const key of keys) {\n        let val = (rest as any)[key];\n\n        // ignore undefined properties\n        if (val === undefined) {\n          continue;\n        }\n\n        if (isObject(val)) {\n          val = stringify(val, maxDepth);\n        }\n\n        content += `<tr><td class=\"key\">${valueToHtml(key)}</td><td class=\"value\">${valueToHtml(val)}</td></tr>`;\n      }\n      content += `</table>`;\n    }\n\n    return content || '{}'; // show empty object if there are no properties\n  }\n\n  return valueToHtml(value);\n}\n\nexport function replacer(maxDepth: number) {\n  const stack: any[] = [];\n\n  return function (this: any, key: string, value: any) {\n    if (typeof value !== 'object' || value === null) {\n      return value;\n    }\n    const pos = stack.indexOf(this) + 1;\n    stack.length = pos;\n    if (stack.length > maxDepth) {\n      return '[Object]';\n    }\n    if (stack.indexOf(value) >= 0) {\n      return '[Circular]';\n    }\n    stack.push(value);\n    return value;\n  };\n}\n\n/**\n * Stringify any JS object to valid JSON\n */\nexport function stringify(obj: any, maxDepth: number) {\n  return JSON.stringify(obj, replacer(maxDepth));\n}\n","// generated with build-style.sh\nexport default `#vg-tooltip-element {\n  visibility: hidden;\n  padding: 8px;\n  position: fixed;\n  z-index: 1000;\n  font-family: sans-serif;\n  font-size: 11px;\n  border-radius: 3px;\n  box-shadow: 2px 2px 4px rgba(0, 0, 0, 0.1);\n  /* The default theme is the light theme. */\n  background-color: rgba(255, 255, 255, 0.95);\n  border: 1px solid #d9d9d9;\n  color: black;\n}\n#vg-tooltip-element.visible {\n  visibility: visible;\n}\n#vg-tooltip-element h2 {\n  margin-top: 0;\n  margin-bottom: 10px;\n  font-size: 13px;\n}\n#vg-tooltip-element table {\n  border-spacing: 0;\n}\n#vg-tooltip-element table tr {\n  border: none;\n}\n#vg-tooltip-element table tr td {\n  overflow: hidden;\n  text-overflow: ellipsis;\n  padding-top: 2px;\n  padding-bottom: 2px;\n}\n#vg-tooltip-element table tr td.key {\n  color: #808080;\n  max-width: 150px;\n  text-align: right;\n  padding-right: 4px;\n}\n#vg-tooltip-element table tr td.value {\n  display: block;\n  max-width: 300px;\n  max-height: 7em;\n  text-align: left;\n}\n#vg-tooltip-element.dark-theme {\n  background-color: rgba(32, 32, 32, 0.9);\n  border: 1px solid #f5f5f5;\n  color: white;\n}\n#vg-tooltip-element.dark-theme td.key {\n  color: #bfbfbf;\n}\n`;\n","import {formatValue} from './formatValue';\nimport defaultStyle from './style';\n\nconst EL_ID = 'vg-tooltip-element';\n\nexport type Position = 'top' | 'bottom' | 'left' | 'right' | 'top-left' | 'top-right' | 'bottom-left' | 'bottom-right';\n\nexport interface Options {\n  /**\n   * X offset.\n   */\n  offsetX?: number;\n\n  /**\n   * Y offset.\n   */\n  offsetY?: number;\n\n  /**\n   * ID of the tooltip element.\n   */\n  id?: string;\n\n  /**\n   * ID of the tooltip CSS style.\n   */\n  styleId?: string;\n\n  /**\n   * The name of the theme. You can use the CSS class called [THEME]-theme to style the tooltips.\n   *\n   * There are two predefined themes: \"light\" (default) and \"dark\".\n   */\n  theme?: string;\n\n  /**\n   * Do not use the default styles provided by Vega Tooltip. If you enable this option, you need to use your own styles. It is not necessary to disable the default style when using a custom theme.\n   */\n  disableDefaultStyle?: boolean;\n\n  /**\n   * HTML sanitizer function that removes dangerous HTML to prevent XSS.\n   *\n   * This should be a function from string to string. You may replace it with a formatter such as a markdown formatter.\n   */\n  sanitize?: (value: any) => string;\n\n  /**\n   * The maximum recursion depth when printing objects in the tooltip.\n   */\n  maxDepth?: number;\n\n  /**\n   * A function to customize the rendered HTML of the tooltip.\n   * @param value A value string, or object of value strings keyed by field\n   * @param sanitize The `sanitize` function from `options.sanitize`\n   * @param baseURL The `baseURL` from `options.baseURL`\n   * @returns {string} The returned string will become the `innerHTML` of the tooltip element\n   */\n  formatTooltip?: (value: any, valueToHtml: (value: any) => string, maxDepth: number, baseURL: string) => string;\n\n  /**\n   * The baseurl to use in image paths.\n   */\n  baseURL?: string;\n\n  /**\n   * The snap reference for the tooltip.\n   */\n  anchor?: 'cursor' | 'mark';\n\n  /**\n   * The position of the tooltip relative to the anchor.\n   *\n   * Only valid when `anchor` is set to 'mark'.\n   */\n  position?: Position | Position[];\n}\n\nexport const DEFAULT_OPTIONS: Required<Options> = {\n  offsetX: 10,\n  offsetY: 10,\n  id: EL_ID,\n  styleId: 'vega-tooltip-style',\n  theme: 'light',\n  disableDefaultStyle: false,\n  sanitize: escapeHTML,\n  maxDepth: 2,\n  formatTooltip: formatValue,\n  baseURL: '',\n  anchor: 'cursor',\n  position: ['top', 'bottom', 'left', 'right', 'top-left', 'top-right', 'bottom-left', 'bottom-right'],\n};\n\n/**\n * Escape special HTML characters.\n *\n * @param value A value to convert to string and HTML-escape.\n */\nexport function escapeHTML(value: any): string {\n  return String(value).replace(/&/g, '&amp;').replace(/</g, '&lt;');\n}\n\nexport function createDefaultStyle(id: string): string {\n  // Just in case this id comes from a user, ensure these is no security issues\n  if (!/^[A-Za-z]+[-:.\\w]*$/.test(id)) {\n    throw new Error('Invalid HTML ID');\n  }\n\n  return defaultStyle.toString().replace(EL_ID, id);\n}\n","import {Bounds} from 'vega-typings';\nimport {Options, Position} from './defaults';\n\ntype MarkBounds = Pick<Bounds, 'x1' | 'x2' | 'y1' | 'y2'>;\n\n/**\n * Position the tooltip\n *\n * @param event The mouse event.\n * @param tooltipBox\n * @param options Tooltip handler options.\n */\nexport function calculatePositionRelativeToCursor(\n  event: MouseEvent,\n  tooltipBox: {width: number; height: number},\n  {offsetX, offsetY}: Required<Options>,\n) {\n  // the possible positions for the tooltip\n  const positions = getPositions(\n    {x1: event.clientX, x2: event.clientX, y1: event.clientY, y2: event.clientY},\n    tooltipBox,\n    offsetX,\n    offsetY,\n  );\n\n  // order of positions to try\n  const postionArr: Position[] = ['bottom-right', 'bottom-left', 'top-right', 'top-left'];\n\n  // test positions till a valid one is found\n  for (const p of postionArr) {\n    if (tooltipIsInViewport(positions[p], tooltipBox)) {\n      return positions[p];\n    }\n  }\n\n  // default to top-left if a valid position is not found\n  // this is legacy behavior\n  return positions['top-left'];\n}\n\n/**\n * Calculates the position of the tooltip relative to the mark.\n * @param handler The handler instance.\n * @param event The mouse event.\n * @param item The item that the tooltip is being shown for.\n * @param tooltipBox Client rect of the tooltip element.\n * @param options Tooltip handler options.\n * @returns\n */\nexport function calculatePositionRelativeToMark(\n  handler: any,\n  event: MouseEvent,\n  item: any,\n  tooltipBox: {width: number; height: number},\n  options: Required<Options>,\n) {\n  const {position, offsetX, offsetY} = options;\n  const containerBox = handler._el.getBoundingClientRect();\n  const origin = handler._origin;\n\n  // bounds of the mark relative to the viewport\n  const markBounds = getMarkBounds(containerBox, origin, item);\n\n  // the possible positions for the tooltip\n  const positions = getPositions(markBounds, tooltipBox, offsetX, offsetY);\n\n  // positions to test\n  const positionArr = Array.isArray(position) ? position : [position];\n\n  // test positions till a valid one is found\n  for (const p of positionArr) {\n    // verify that the tooltip is in the view and the mouse is not where the tooltip would be\n    if (tooltipIsInViewport(positions[p], tooltipBox) && !mouseIsOnTooltip(event, positions[p], tooltipBox)) {\n      return positions[p];\n    }\n  }\n\n  // default to cursor position if a valid position is not found\n  return calculatePositionRelativeToCursor(event, tooltipBox, options);\n}\n\n// Calculates the bounds of the mark relative to the viewport.\nexport function getMarkBounds(\n  containerBox: {left: number; top: number},\n  origin: [number, number],\n  item: any,\n): MarkBounds {\n  // if this is a voronoi mark, we want to use the bounds of the point that voronoi cell represents\n  const markBounds = item.isVoronoi ? item.datum.bounds : item.bounds;\n\n  let left = containerBox.left + origin[0] + markBounds.x1;\n  let top = containerBox.top + origin[1] + markBounds.y1;\n\n  // traverse mark groups, summing their offsets to get the total offset\n  // item bounds are relative to their group so if there are multiple nested groups we need to add them all\n  let parentItem = item;\n  while (parentItem.mark.group) {\n    parentItem = parentItem.mark.group;\n    if ('x' in parentItem && 'y' in parentItem) {\n      left += parentItem.x;\n      top += parentItem.y;\n    }\n  }\n\n  const markWidth = markBounds.x2 - markBounds.x1;\n  const markHeight = markBounds.y2 - markBounds.y1;\n\n  return {\n    x1: left,\n    x2: left + markWidth,\n    y1: top,\n    y2: top + markHeight,\n  };\n}\n\n// Calculates the tooltip xy for each possible position.\nexport function getPositions(\n  markBounds: MarkBounds,\n  tooltipBox: {width: number; height: number},\n  offsetX: number,\n  offsetY: number,\n) {\n  const xc = (markBounds.x1 + markBounds.x2) / 2;\n  const yc = (markBounds.y1 + markBounds.y2) / 2;\n\n  // x positions\n  const left = markBounds.x1 - tooltipBox.width - offsetX;\n  const center = xc - tooltipBox.width / 2;\n  const right = markBounds.x2 + offsetX;\n\n  // y positions\n  const top = markBounds.y1 - tooltipBox.height - offsetY;\n  const middle = yc - tooltipBox.height / 2;\n  const bottom = markBounds.y2 + offsetY;\n\n  const positions: Record<Position, {x: number; y: number}> = {\n    top: {x: center, y: top},\n    bottom: {x: center, y: bottom},\n    left: {x: left, y: middle},\n    right: {x: right, y: middle},\n    'top-left': {x: left, y: top},\n    'top-right': {x: right, y: top},\n    'bottom-left': {x: left, y: bottom},\n    'bottom-right': {x: right, y: bottom},\n  };\n  return positions;\n}\n\n// Checks if the tooltip would be in the viewport at the given position\nexport function tooltipIsInViewport(position: {x: number; y: number}, tooltipBox: {width: number; height: number}) {\n  return (\n    position.x >= 0 &&\n    position.y >= 0 &&\n    position.x + tooltipBox.width <= window.innerWidth &&\n    position.y + tooltipBox.height <= window.innerHeight\n  );\n}\n\n// Checks if the mouse is within the tooltip area\nexport function mouseIsOnTooltip(\n  event: MouseEvent,\n  position: {x: number; y: number},\n  tooltipBox: {width: number; height: number},\n) {\n  return (\n    event.clientX >= position.x &&\n    event.clientX <= position.x + tooltipBox.width &&\n    event.clientY >= position.y &&\n    event.clientY <= position.y + tooltipBox.height\n  );\n}\n","import {TooltipHandler} from 'vega-typings';\n\nimport {createDefaultStyle, DEFAULT_OPTIONS, Options} from './defaults';\nimport {calculatePositionRelativeToCursor, calculatePositionRelativeToMark} from './position';\n\n/**\n * The tooltip handler class.\n */\nexport class Handler {\n  /**\n   * The handler function. We bind this to this function in the constructor.\n   */\n  public call: TooltipHandler;\n\n  /**\n   * Complete tooltip options.\n   */\n  private options: Required<Options>;\n\n  /**\n   * The tooltip html element.\n   */\n  private el: HTMLElement | null;\n\n  /**\n   * Create the tooltip handler and initialize the element and style.\n   *\n   * @param options Tooltip Options\n   */\n  constructor(options?: Options) {\n    this.options = {...DEFAULT_OPTIONS, ...options};\n    const elementId = this.options.id;\n    this.el = null;\n\n    // bind this to call\n    this.call = this.tooltipHandler.bind(this);\n\n    // prepend a default stylesheet for tooltips to the head\n    if (!this.options.disableDefaultStyle && !document.getElementById(this.options.styleId)) {\n      const style = document.createElement('style');\n      style.setAttribute('id', this.options.styleId);\n      style.innerHTML = createDefaultStyle(elementId);\n\n      const head = document.head;\n      if (head.childNodes.length > 0) {\n        head.insertBefore(style, head.childNodes[0]);\n      } else {\n        head.appendChild(style);\n      }\n    }\n  }\n\n  /**\n   * The tooltip handler function.\n   */\n  private tooltipHandler(handler: any, event: MouseEvent, item: any, value: any) {\n    // append a div element that we use as a tooltip unless it already exists\n    this.el = document.getElementById(this.options.id);\n    if (!this.el) {\n      this.el = document.createElement('div');\n      this.el.setAttribute('id', this.options.id);\n      this.el.classList.add('vg-tooltip');\n\n      const tooltipContainer = document.fullscreenElement ?? document.body;\n      tooltipContainer.appendChild(this.el);\n    }\n\n    // hide tooltip for null, undefined, or empty string values\n    if (value == null || value === '') {\n      this.el.classList.remove('visible', `${this.options.theme}-theme`);\n      return;\n    }\n\n    // set the tooltip content\n    this.el.innerHTML = this.options.formatTooltip(\n      value,\n      this.options.sanitize,\n      this.options.maxDepth,\n      this.options.baseURL,\n    );\n\n    // make the tooltip visible\n    this.el.classList.add('visible', `${this.options.theme}-theme`);\n\n    const {x, y} =\n      this.options.anchor === 'mark'\n        ? calculatePositionRelativeToMark(handler, event, item, this.el.getBoundingClientRect(), this.options)\n        : calculatePositionRelativeToCursor(event, this.el.getBoundingClientRect(), this.options);\n\n    this.el.style.top = `${y}px`;\n    this.el.style.left = `${x}px`;\n  }\n}\n","import pkg from '../package.json';\nimport {View} from 'vega-typings';\n\nimport {Options} from './defaults';\nimport {Handler} from './Handler';\n\nconst version = pkg.version;\n\nexport * from './defaults';\nexport * from './formatValue';\nexport * from './position';\nexport * from './Handler';\nexport {version};\n\n/**\n * Create a tooltip handler and register it with the provided view.\n *\n * @param view The Vega view.\n * @param opt Tooltip options.\n */\nexport default function (view: View, opt?: Options) {\n  const handler = new Handler(opt);\n\n  view.tooltip(handler.call).run();\n\n  return handler;\n}\n"],"names":["formatValue","value","valueToHtml","maxDepth","baseURL","isArray","map","v","isString","stringify","join","isObject","content","title","image","rest","URL","location","href","keys","Object","length","key","val","undefined","replacer","stack","pos","indexOf","this","push","obj","JSON","defaultStyle","EL_ID","DEFAULT_OPTIONS","offsetX","offsetY","id","styleId","theme","disableDefaultStyle","sanitize","escapeHTML","formatTooltip","anchor","position","String","replace","createDefaultStyle","test","Error","toString","calculatePositionRelativeToCursor","event","tooltipBox","positions","getPositions","x1","clientX","x2","y1","clientY","y2","postionArr","p","tooltipIsInViewport","calculatePositionRelativeToMark","handler","item","options","getMarkBounds","_el","getBoundingClientRect","_origin","positionArr","Array","mouseIsOnTooltip","containerBox","origin","markBounds","isVoronoi","datum","bounds","left","top","parentItem","mark","group","x","y","xc","yc","width","center","right","height","middle","bottom","window","innerWidth","innerHeight","Handler","constructor","elementId","el","call","tooltipHandler","bind","document","getElementById","style","createElement","setAttribute","innerHTML","head","childNodes","insertBefore","appendChild","classList","add","fullscreenElement","body","remove","version","pkg","view","opt","tooltip","run"],"mappings":"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"}